//회원 정보를 모델(Model)로 부터 처리하기 위한 DTO클래스(Data Transfer Object)
/*
 * 작성일: 23.07.10.월 
 * 작성자: 김진아
 * 
 */
package hotel.dto;

import java.util.ArrayList;

import hotel.dao.*;
import hotel.vo.*;

//각 메소드에서 DBManager를 사용하고 있음. 따라서 DBManager를 상속하여 사용하는게 간편하다.
public class UserDTO extends DBManager
{
	//회원가입(User)
	
	//c: insert
	//이메일 인증 발송
	public boolean emailsend()
	{
		boolean check = false;
		
		this.DBOpen();
		String sql = "";
				
		return check;
		
	}
	//UserVO객체를 이용하여 회원가입을 한다.Join()(회원가입)
	//true: 중복된 이메일이 없다. false: 중복된 이메일이 있다.
	public boolean join(UserVO user)
	{
		//중복된 이메일이 있을 때
		if(this.isduplicate(user.getEmail()) == true)
		{
			System.out.println("중복된 아이디[" + _R(user.getEmail()) + "] 입니다.");
			return false; //false는 죽인다. true는 살린다.
		}
		//중복된 이메일이 없을 때(default 값은 제외)
		this.DBOpen();
		String sql = "";
		sql = "insert into user(email,pw,ename,kname,gender,korf,number,birth,agreop,token) ";
		sql += "values ";
		sql += "('" + _R(user.getEmail()) + "', ";
		sql += "md5('" + _R(user.getPw()) + "'), ";
		sql += "'" + _R(user.getEname()) + "',  ";
		sql += "'" + _R(user.getKname()) + "', ";
		sql += "'" + _R(user.getGender()) + "', ";
		sql += "'" + _R(user.getKorf()) + "', ";
		sql += "'" + _R(user.getNumber()) + "', ";
		sql += "'" + _R(user.getBirth()) + "', "; 
		sql += "'" + _R(user.getAgreop()) + "', ";
		sql += "'" + _R(user.getToken()) + "')";
		System.out.println(sql);
		this.RunSQL(sql);
		
		this.DBClose();
		return true;
		
		
		
	}
	

	//r : select
	//read()(회원 정보 조회)
	public UserVO read(String email)
	{	
		UserVO user = new UserVO();
		this.DBOpen();
		String sql = "";
		sql  = "select email,ename,kname,gender,joindate,korf,number,birth,level ";
		sql += "from user ";
		sql += "where email = '" + email + "' ";
		System.out.println(sql);
		this.RunSelect(sql);
		if(this.Next() == true)
		{
			user.setEmail(this.getValue("email"));
			user.setEname(this.getValue("ename"));
			user.setKname(this.getValue("kname"));
			user.setGender(this.getValue("gender"));
			user.setJoindate(this.getValue("joindate"));
			user.setKorf(this.getValue("korf"));
			user.setNumber(this.getValue("number"));
			user.setBirth(this.getValue("birth"));
			user.setLevel(this.getValue("level"));
		}
		this.DBClose();
		
		return user;
	}
	
	
	
	//levelcheck()(등급 조회)
	public String levelcheck(String email)
	{
		String level = "U";
		this.DBOpen();
		String sql = "";
		sql  = "select level ";
		sql += "from user ";
		sql += "where email = '" + email + "' ";
		System.out.println(sql);
		this.RunSelect(sql);
		
		if(this.Next() == true)
		{
			level = this.getValue("level");	
		}
		
		this.DBClose();
		return level;
	}
	
	//isduplicate()(이메일 중복 검사)
	//true: 중복, false: 중복 아님 
	public boolean isduplicate(String email)
	{
		boolean flag = false;
		this.DBOpen();
		
		String sql = "";
		sql = "select email from user where email = '" + _R(email) + "' ";
		System.out.println(sql);
		this.RunSelect(sql);
		//중복된 email이 존재
		if(this.Next() == true)
		{
			flag = true;
		}
		this.DBClose();
		return flag;
	}
		
	//login()(로그인 하기), 비밀번호 틀린 횟수 초기화, 비밀번호 틀린 횟수 업데이트 넣어주기
	//return 값 true: 로그인 성공, false: 로그인 실패
	public boolean login(String email, String pw)
	{
		UserDTO dto = new UserDTO();
		UserVO vo = new UserVO();
		boolean islogin = false;
		this.DBOpen();
		
		String sql = "";
		sql = "select email ";
		sql += "from user ";
		sql += "where email = '" + _R(email) + "' ";
		sql += "and pw = md5('" + _R(pw) + "') ";
		sql += "and level = 'U' ";
		System.out.println(sql);
		this.RunSelect(sql);
		if(this.Next() == true)
		{
			//로그인 성공
			System.out.println("[" + _R(email) + "] 로그인 성공!!!");
			islogin = true;
			this.pwfreset(email);
		}else
		{
			//로그인 실패 
			System.out.println("[" + _R(email) + "] 로그인 실패!!!");
			this.pwfcount(email);
		}
		this.DBClose();
		return islogin;	
	}
	
	
	//list()(회원 정보를 목록을 가져오기)
	public ArrayList<UserVO> list(int PageNo)
	{
		ArrayList<UserVO> list = new ArrayList<UserVO>();
		
		int startNo = (PageNo - 1) * 10;  //시작 번호
		
		this.DBOpen();
		String sql = "";
		sql = "select email,ename,kname,birth,gender,korf,number,date(joindate) as joindate ";
		sql += "from user ";
		sql += "where level = 'U' ";
		sql += "order by joindate desc ";
		sql += "limit " + startNo + ",10";
		System.out.println(sql);
		this.RunSelect(sql);
		
		while(this.Next() == true)
		{
			UserVO user = new UserVO();
			user.setEmail(this.getValue("email"));
			user.setEname(this.getValue("ename"));
			user.setKname(this.getValue("kname"));
			user.setBirth(this.getValue("birth"));
			user.setGender(this.getValue("gender"));
			user.setKorf(this.getValue("korf"));
			user.setNumber(this.getValue("number"));
			user.setJoindate(this.getValue("joindate"));
			
			//배열로 값을 저장
			list.add(user);
		}
			this.DBClose();
			return list;
		
	}
	
	//gettotal()(전체 회원정보 개수)
	public int gettotal()
	{
		int total = 0;
		this.DBOpen();
		String sql = "";
		sql = "select count(*) as total ";
		sql += "from user ";
		sql += "where level = 'U' ";
		System.out.println(sql);
		this.RunSelect(sql);
		
		if(this.Next() == true)
		{
			total = Integer.parseInt(this.getValue("total"));
		}
		this.DBClose();
		return total;
	}

	//u : update
	//modify()(회원 정보 수정)
	public void modify(UserVO vo)
	{
		this.DBOpen();
		String sql = "";
		sql = "update user ";
		sql += "set ename = '" + _R(vo.getEname()) + "' ,";
		sql += "kname = '" + _R(vo.getKname()) + "' ,";
		sql += "pw = md5('"+ _R(vo.getPw()) + "') ,";
		sql += "number = '" + _R(vo.getNumber()) + "' ";
		sql += "where email = '"+ _R(vo.getEmail())+ "' ";
		System.out.println(sql);
		this.RunSelect(sql);
		
		this.DBClose();
	}
	
	//pwchange()(비밀번호 변경)
	public void pwchange(UserVO vo)
	{
		this.DBOpen();
		String sql = "";
		sql  = "update user ";
		sql += "set pw = md5('" + _R(vo.getPw()) + "') ";
		sql += "where email = '" + _R(vo.getEmail()) + "' ";
		System.out.println(sql);
		this.RunSQL(sql);
		
		this.DBClose();
	}
	//로그인 성공했을 때
	//pwfreset()(비밀번호 틀린 횟수 초기화)
	public void pwfreset(String email)
	{
		
		this.DBOpen();
		String sql = "";
		sql = "update user set ";
		sql += "pwfcnt = '0' ";
		sql += "where email = '" + _R(email) + "' ";
		System.out.println(sql);
		this.RunSQL(sql);
		
	}
	
	//pwfcheck()(비밀번호 틀린 횟수 조회) => 필요 없을 거 같?
		
	//로그인 실패했을 때
	//pwfcount()(비밀번호 틀린 횟수 업데이트)
	/*
	public void pwfcount(UserVO user)
	{
		this.DBOpen();
		String sql = "";
		sql = "update user set ";
		sql += "pwfcnt = pwfcnt + 1 ";
		sql += "where email = '"+ _R(user.getEmail()) + "' ";
		System.out.println(sql);
		this.RunSQL(sql);
		if(Integer.parseInt(user.getPwfcnt()) >= 5)
		{
			
			this.DBClose();
			return;
		}
		
		this.DBClose();
		return;
	}
	*/
	public void pwfcount(String email)
	{
		String pwfcnt = "0";
		this.DBOpen();
		String sql = "";
		sql = "update user set ";
		sql += "pwfcnt = pwfcnt + 1 ";
		sql += "where email = '"+ email + "' ";
		System.out.println(sql);
		this.RunSQL(sql);
		
		if(Integer.parseInt(pwfcnt) >= 5)
		{
			System.out.println("비밀번호 틀린 횟수가 5회 이상입니다.");
			this.DBClose();
			return;
		}
		
		this.DBClose();
		return;
	}

	
}
